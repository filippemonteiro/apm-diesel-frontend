import { STORAGE_KEYS, VEHICLE_STATUS, USER_ROLES } from "../utils/constants";

// Classe para gerenciar dados no localStorage
class LocalStorageService {
  // M√©todos gen√©ricos para localStorage
  setItem(key, value) {
    try {
      localStorage.setItem(key, JSON.stringify(value));
      return true;
    } catch (error) {
      console.error("Erro ao salvar no localStorage:", error);
      return false;
    }
  }

  getItem(key) {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : null;
    } catch (error) {
      console.error("Erro ao ler do localStorage:", error);
      return null;
    }
  }

  removeItem(key) {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error("Erro ao remover do localStorage:", error);
      return false;
    }
  }

  // Inicializar dados padr√£o
  initializeDefaultData() {
    // Usu√°rios padr√£o
    if (!this.getItem(STORAGE_KEYS.users)) {
      const defaultUsers = [
        {
          id: 1,
          email: "admin@apmdiesel.com",
          password: "123456",
          name: "Administrador APM",
          role: USER_ROLES.ADMIN,
          createdAt: new Date().toISOString(),
        },
        {
          id: 2,
          email: "motorista@apmdiesel.com",
          password: "123456",
          name: "Jo√£o Silva",
          role: USER_ROLES.DRIVER,
          createdAt: new Date().toISOString(),
        },
      ];
      this.setItem(STORAGE_KEYS.users, defaultUsers);
    }

    // Ve√≠culos padr√£o
    if (!this.getItem(STORAGE_KEYS.vehicles)) {
      const defaultVehicles = [
        {
          id: 1,
          plate: "ABC-1234",
          model: "Ford Transit",
          year: 2023,
          brand: "Ford",
          qrCode: "APM_VEHICLE_1",
          status: VEHICLE_STATUS.AVAILABLE,
          lastCheckIn: null,
          lastCheckOut: null,
          currentUserId: null,
          odometer: 45000,
          fuelLevel: 80,
        },
        {
          id: 2,
          plate: "DEF-5678",
          model: "Sprinter",
          year: 2022,
          brand: "Mercedes-Benz",
          qrCode: "APM_VEHICLE_2",
          status: VEHICLE_STATUS.AVAILABLE,
          lastCheckIn: null,
          lastCheckOut: null,
          currentUserId: null,
          odometer: 32000,
          fuelLevel: 60,
        },
        {
          id: 3,
          plate: "GHI-9012",
          model: "Daily",
          year: 2023,
          brand: "Iveco",
          qrCode: "APM_VEHICLE_3",
          status: VEHICLE_STATUS.MAINTENANCE,
          lastCheckIn: "2024-01-10T14:30:00.000Z",
          lastCheckOut: null,
          currentUserId: null,
          odometer: 28000,
          fuelLevel: 25,
        },
      ];
      this.setItem(STORAGE_KEYS.vehicles, defaultVehicles);
    }

    // Hist√≥rico de ve√≠culos padr√£o
    if (!this.getItem(STORAGE_KEYS.vehicleHistory)) {
      const defaultHistory = [
        {
          id: 1,
          vehicleId: 1,
          userId: 2,
          userName: "Jo√£o Silva",
          vehiclePlate: "ABC-1234",
          action: "checkin",
          timestamp: "2024-01-15T08:30:00.000Z",
          location: "Garagem Principal",
          odometer: 44950,
          fuelLevel: 85,
          notes: "Ve√≠culo em perfeitas condi√ß√µes",
        },
        {
          id: 2,
          vehicleId: 1,
          userId: 2,
          userName: "Jo√£o Silva",
          vehiclePlate: "ABC-1234",
          action: "checkout",
          timestamp: "2024-01-15T17:45:00.000Z",
          location: "Garagem Principal",
          odometer: 45000,
          fuelLevel: 80,
          notes: "Entrega realizada com sucesso",
        },
      ];
      this.setItem(STORAGE_KEYS.vehicleHistory, defaultHistory);
    }

    // Solicita√ß√µes de servi√ßo padr√£o
    if (!this.getItem(STORAGE_KEYS.serviceRequests)) {
      const defaultRequests = [
        {
          id: 1,
          vehicleId: 3,
          userId: 2,
          userName: "Jo√£o Silva",
          vehiclePlate: "GHI-9012",
          type: "maintenance",
          title: "Revis√£o Programada",
          description:
            "Revis√£o dos 30.000 km - trocar √≥leo, filtros e verificar freios",
          priority: "medium",
          status: "pending",
          createdAt: "2024-01-16T09:00:00.000Z",
          updatedAt: "2024-01-16T09:00:00.000Z",
        },
        {
          id: 2,
          vehicleId: 2,
          userId: 2,
          userName: "Jo√£o Silva",
          vehiclePlate: "DEF-5678",
          type: "fuel",
          title: "Abastecimento",
          description: "Solicito abastecimento completo do ve√≠culo",
          priority: "high",
          status: "approved",
          createdAt: "2024-01-16T14:30:00.000Z",
          updatedAt: "2024-01-16T15:00:00.000Z",
        },
      ];
      this.setItem(STORAGE_KEYS.serviceRequests, defaultRequests);
    }
  }

  // M√©todos espec√≠ficos para usu√°rios
  getAllUsers() {
    return this.getItem(STORAGE_KEYS.users) || [];
  }

  getUserByEmail(email) {
    const users = this.getAllUsers();
    return users.find((user) => user.email === email);
  }

  createUser(userData) {
    const users = this.getAllUsers();
    const newUser = {
      ...userData,
      id: Date.now(),
      createdAt: new Date().toISOString(),
    };
    users.push(newUser);
    this.setItem(STORAGE_KEYS.users, users);
    return newUser;
  }

  // M√©todos espec√≠ficos para ve√≠culos
  getAllVehicles() {
    return this.getItem(STORAGE_KEYS.vehicles) || [];
  }

  getVehicleById(id) {
    const vehicles = this.getAllVehicles();
    return vehicles.find((vehicle) => vehicle.id === parseInt(id));
  }

  getVehicleByQrCode(qrCode) {
    const vehicles = this.getAllVehicles();
    return vehicles.find((vehicle) => vehicle.qrCode === qrCode);
  }

  updateVehicle(vehicleId, updates) {
    const vehicles = this.getAllVehicles();
    const index = vehicles.findIndex((v) => v.id === parseInt(vehicleId));
    if (index !== -1) {
      vehicles[index] = { ...vehicles[index], ...updates };
      this.setItem(STORAGE_KEYS.vehicles, vehicles);
      return vehicles[index];
    }
    return null;
  }

  // M√©todos espec√≠ficos para hist√≥rico
  getAllHistory() {
    return this.getItem(STORAGE_KEYS.vehicleHistory) || [];
  }

  addHistoryEntry(historyData) {
    const history = this.getAllHistory();
    const newEntry = {
      ...historyData,
      id: Date.now(),
      timestamp: new Date().toISOString(),
    };
    history.unshift(newEntry); // Adiciona no in√≠cio para ordem cronol√≥gica
    this.setItem(STORAGE_KEYS.vehicleHistory, history);
    return newEntry;
  }

  getHistoryByUserId(userId) {
    const history = this.getAllHistory();
    return history.filter((entry) => entry.userId === parseInt(userId));
  }

  getHistoryByVehicleId(vehicleId) {
    const history = this.getAllHistory();
    return history.filter((entry) => entry.vehicleId === parseInt(vehicleId));
  }

  // M√©todos espec√≠ficos para solicita√ß√µes de servi√ßo
  getAllServiceRequests() {
    return this.getItem(STORAGE_KEYS.serviceRequests) || [];
  }

  addServiceRequest(requestData) {
    const requests = this.getAllServiceRequests();
    const newRequest = {
      ...requestData,
      id: Date.now(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
    requests.unshift(newRequest);
    this.setItem(STORAGE_KEYS.serviceRequests, requests);
    return newRequest;
  }

  updateServiceRequest(requestId, updates) {
    const requests = this.getAllServiceRequests();
    const index = requests.findIndex((r) => r.id === parseInt(requestId));
    if (index !== -1) {
      requests[index] = {
        ...requests[index],
        ...updates,
        updatedAt: new Date().toISOString(),
      };
      this.setItem(STORAGE_KEYS.serviceRequests, requests);
      return requests[index];
    }
    return null;
  }

  getServiceRequestsByUserId(userId) {
    const requests = this.getAllServiceRequests();
    return requests.filter((request) => request.userId === parseInt(userId));
  }

  // M√©todos de autentica√ß√£o
  setCurrentUser(user) {
    this.setItem(STORAGE_KEYS.user, user);
  }

  getCurrentUser() {
    const user = this.getItem(STORAGE_KEYS.user);
    console.log("üì¶ LocalStorage.getCurrentUser:", user?.name || "null");
    return user;
  }

  getAuthToken() {
    const token = this.getItem(STORAGE_KEYS.token);
    console.log("üîë LocalStorage.getAuthToken:", !!token);
    return token;
  }

  setCurrentUser(user) {
    console.log("üíæ LocalStorage.setCurrentUser:", user.name);
    this.setItem(STORAGE_KEYS.user, user);
  }

  setAuthToken(token) {
    console.log("üíæ LocalStorage.setAuthToken:", !!token);
    this.setItem(STORAGE_KEYS.token, token);
  }

  clearAuthData() {
    this.removeItem(STORAGE_KEYS.user);
    this.removeItem(STORAGE_KEYS.token);
  }

  // M√©todo para limpar todos os dados (reset da aplica√ß√£o)
  clearAllData() {
    Object.values(STORAGE_KEYS).forEach((key) => {
      this.removeItem(key);
    });
  }
}

// Exportar inst√¢ncia √∫nica do servi√ßo
export default new LocalStorageService();
