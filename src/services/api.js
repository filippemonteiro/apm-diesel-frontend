import axios from "axios";
import { toast } from "react-toastify";
import LocalStorageService from "./localStorage";
import { MESSAGES } from "../utils/constants";

// üî• CONFIGURA√á√ÉO DE PRODU√á√ÉO
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || "https://api.controllcar.com.br/api",
  timeout: 15000, // Aumentado para 15s
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Interceptor de requisi√ß√µes - adiciona token de autentica√ß√£o
api.interceptors.request.use(
  (config) => {
    const token = LocalStorageService.getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    console.log(
      `üì° ${config.method.toUpperCase()} ${config.baseURL}${config.url}`
    );
    return config;
  },
  (error) => {
    console.error("‚ùå Erro na requisi√ß√£o:", error);
    return Promise.reject(error);
  }
);

// Interceptor de respostas - trata erros globalmente
api.interceptors.response.use(
  (response) => {
    console.log(
      `‚úÖ ${response.config.method.toUpperCase()} ${response.config.url} - ${
        response.status
      }`
    );
    return response;
  },
  (error) => {
    const status = error.response?.status;
    const message = error.response?.data?.message || error.message;

    console.error(
      `‚ùå ${error.config?.method?.toUpperCase()} ${error.config?.url} - ${
        status || "NETWORK_ERROR"
      }`
    );
    console.error("Detalhes:", message);

    // Trata erros de autentica√ß√£o
    if (status === 401) {
      console.warn("üîë 401 Unauthorized - Sess√£o expirada");
      LocalStorageService.clearAuthData();
      toast.error("Sess√£o expirada. Fa√ßa login novamente.");

      // S√≥ redireciona se n√£o estiver j√° na p√°gina de login
      if (!window.location.pathname.includes("/login")) {
        window.location.href = "/login";
      }
      return Promise.reject(error);
    }

    // Trata erros de servidor
    if (status >= 500) {
      toast.error("Erro no servidor. Tente novamente em alguns minutos.");
      return Promise.reject(error);
    }

    // Trata erros de rede
    if (error.code === "ECONNREFUSED" || error.code === "ERR_NETWORK") {
      toast.error("Erro de conex√£o. Verifique sua internet e tente novamente.");
      return Promise.reject(error);
    }

    return Promise.reject(error);
  }
);

// Classe principal da API - APENAS PRODU√á√ÉO
class ApiService {
  // ===== AUTENTICA√á√ÉO =====
  async login(credentials) {
    try {
      console.log("üîê Fazendo login:", credentials.email);

      const response = await api.post("/login", credentials);

      if (!response.data.token) {
        throw new Error("Token n√£o retornado pelo servidor");
      }

      // Salvar token imediatamente
      LocalStorageService.setAuthToken(response.data.token);
      console.log("üíæ Token salvo com sucesso");

      // Buscar dados do usu√°rio
      try {
        const userResponse = await api.post("/me");
        LocalStorageService.setCurrentUser(userResponse.data);
        console.log("üë§ Dados do usu√°rio carregados:", userResponse.data.name);

        return {
          user: userResponse.data,
          token: response.data.token,
          message: response.data.message || "Login realizado com sucesso",
        };
      } catch (userError) {
        console.error("‚ùå Erro ao buscar dados do usu√°rio:", userError);

        // Criar usu√°rio b√°sico a partir do email
        const basicUser = {
          email: credentials.email,
          name: credentials.email.split("@")[0],
          role: "4", // Motorista por padr√£o
        };
        LocalStorageService.setCurrentUser(basicUser);

        return {
          user: basicUser,
          token: response.data.token,
          message: "Login realizado com sucesso",
        };
      }
    } catch (error) {
      console.error("‚ùå Erro no login:", error);

      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }

      throw new Error("Email ou senha incorretos");
    }
  }

  async register(userData) {
    try {
      const response = await api.post("/cadastro", userData);
      return response.data;
    } catch (error) {
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      if (error.response?.data?.errors) {
        const errors = error.response.data.errors;
        const firstError = Object.values(errors)[0][0];
        throw new Error(firstError);
      }
      throw new Error("Erro ao criar conta. Tente novamente.");
    }
  }

  async logout() {
    try {
      await api.post("/logout");
      console.log("‚úÖ Logout realizado no backend");
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro no logout do backend:", error.message);
    } finally {
      LocalStorageService.clearAuthData();
      console.log("üßπ Dados locais limpos");
    }

    return {
      message: "Logout realizado com sucesso",
    };
  }

  async resetPassword(email) {
    try {
      const response = await api.post("/reset-password", { email });
      return response.data;
    } catch (error) {
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      throw new Error("Erro ao enviar email de recupera√ß√£o.");
    }
  }

  async getCurrentUser() {
    try {
      const response = await api.post("/me");
      return response.data;
    } catch (error) {
      throw new Error("Erro ao obter dados do usu√°rio.");
    }
  }

  // ===== VE√çCULOS =====
  async getVehicles() {
    try {
      const response = await api.get("/veiculos");
      console.log("üöó Ve√≠culos carregados:", response.data?.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao buscar ve√≠culos:", error);
      throw new Error("Erro ao carregar lista de ve√≠culos.");
    }
  }

  async getVehicleById(id) {
    try {
      const response = await api.get(`/veiculos/${id}`);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao buscar ve√≠culo:", error);
      throw new Error("Ve√≠culo n√£o encontrado.");
    }
  }

  async getVehicleByQrCode(qrCode) {
    try {
      const response = await api.get(`/carros/qr/${qrCode}`);
      return response.data;
    } catch (error) {
      console.error("‚ùå QR Code n√£o encontrado:", qrCode);
      throw new Error("QR Code n√£o encontrado.");
    }
  }

  async createVehicle(vehicleData) {
    try {
      const response = await api.post("/veiculos", vehicleData);
      console.log("‚úÖ Ve√≠culo criado:", vehicleData.placa);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao criar ve√≠culo:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      if (error.response?.data?.errors) {
        const errors = error.response.data.errors;
        const firstError = Object.values(errors)[0][0];
        throw new Error(firstError);
      }
      throw new Error("Erro ao cadastrar ve√≠culo.");
    }
  }

  async updateVehicle(id, vehicleData) {
    try {
      const response = await api.put(`/veiculos/${id}`, vehicleData);
      console.log("‚úÖ Ve√≠culo atualizado:", id);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao atualizar ve√≠culo:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      throw new Error("Erro ao atualizar ve√≠culo.");
    }
  }

  async deleteVehicle(id) {
    try {
      const response = await api.delete(`/veiculos/${id}`);
      console.log("‚úÖ Ve√≠culo exclu√≠do:", id);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao excluir ve√≠culo:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      throw new Error("Erro ao excluir ve√≠culo.");
    }
  }

  // ===== USU√ÅRIOS =====
  async getUsers() {
    try {
      const response = await api.get("/usuarios");
      console.log("üë• Usu√°rios carregados:", response.data?.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao buscar usu√°rios:", error);
      throw new Error("Erro ao carregar lista de usu√°rios.");
    }
  }

  async getUserById(id) {
    try {
      const response = await api.get(`/usuarios/${id}`);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao buscar usu√°rio:", error);
      throw new Error("Usu√°rio n√£o encontrado.");
    }
  }

  async createUser(userData) {
    try {
      const response = await api.post("/usuarios", userData);
      console.log("‚úÖ Usu√°rio criado:", userData.email);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao criar usu√°rio:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      if (error.response?.data?.errors) {
        const errors = error.response.data.errors;
        const firstError = Object.values(errors)[0][0];
        throw new Error(firstError);
      }
      throw new Error("Erro ao cadastrar usu√°rio.");
    }
  }

  async updateUser(id, userData) {
    try {
      const response = await api.put(`/usuarios/${id}`, userData);
      console.log("‚úÖ Usu√°rio atualizado:", id);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao atualizar usu√°rio:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      if (error.response?.data?.errors) {
        const errors = error.response.data.errors;
        const firstError = Object.values(errors)[0][0];
        throw new Error(firstError);
      }
      throw new Error("Erro ao atualizar usu√°rio.");
    }
  }

  async deleteUser(id) {
    try {
      const response = await api.delete(`/usuarios/${id}`);
      console.log("‚úÖ Usu√°rio exclu√≠do:", id);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao excluir usu√°rio:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      throw new Error("Erro ao excluir usu√°rio.");
    }
  }

  // ===== CHECK-IN/CHECK-OUT =====
  async checkInVehicle(data) {
    try {
      const response = await api.post("/checkin", data);
      console.log("‚úÖ Check-in realizado:", data.qrCode);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro no check-in:", error);
      throw new Error("Erro ao realizar check-in.");
    }
  }

  async checkOutVehicle(data) {
    try {
      const response = await api.post("/checkout", data);
      console.log("‚úÖ Check-out realizado:", data.qrCode);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro no check-out:", error);
      throw new Error("Erro ao realizar check-out.");
    }
  }

  // ===== DASHBOARD =====
  async getDashboardData() {
    try {
      const response = await api.get("/dashboard/totais");
      console.log("üìä Dashboard carregado");
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao carregar dashboard:", error);
      throw new Error("Erro ao carregar dados do dashboard.");
    }
  }

  // ===== SERVI√áOS =====
  async getServiceRequests() {
    try {
      const response = await api.get("/servicos");
      console.log("üîß Servi√ßos carregados");
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao carregar servi√ßos:", error);
      throw new Error("Erro ao carregar solicita√ß√µes de servi√ßo.");
    }
  }

  async createServiceRequest(serviceData) {
    try {
      const response = await api.post("/servicos", serviceData);
      console.log("‚úÖ Servi√ßo solicitado:", serviceData.tipo);
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao solicitar servi√ßo:", error);
      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }
      throw new Error("Erro ao solicitar servi√ßo.");
    }
  }

  async getServiceHistory(userId = null) {
    try {
      const url = userId ? `/servicos?motorista_id=${userId}` : "/servicos";
      const response = await api.get(url);
      console.log("üìã Hist√≥rico de servi√ßos carregado");
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao carregar hist√≥rico:", error);
      throw new Error("Erro ao carregar hist√≥rico de servi√ßos.");
    }
  }

  // ===== RELAT√ìRIOS =====
  async getReports() {
    try {
      const response = await api.get("/relatorios");
      console.log("üìã Relat√≥rios carregados");
      return response.data;
    } catch (error) {
      console.error("‚ùå Erro ao carregar relat√≥rios:", error);
      throw new Error("Erro ao buscar relat√≥rios.");
    }
  }

  // ===== OP√á√ïES/CONFIGURA√á√ïES =====
  async getVehicleOptions() {
    try {
      const response = await api.get("/veiculos/options");
      return response.data;
    } catch (error) {
      console.warn("‚ö†Ô∏è Endpoint de op√ß√µes n√£o dispon√≠vel, usando padr√µes");
      // Retorna dados padr√£o para n√£o quebrar o sistema
      return {
        marcas: ["Ford", "Mercedes-Benz", "Iveco", "Volkswagen", "Renault"],
        tipos: ["Van", "Caminh√£o", "√înibus", "Carro", "Utilit√°rio"],
        combustiveis: ["Gasolina", "Diesel", "Flex", "El√©trico"],
        status: ["Dispon√≠vel", "Em uso", "Manuten√ß√£o", "Indispon√≠vel"],
      };
    }
  }

  async getUserOptions() {
    try {
      const response = await api.get("/usuarios/options");
      return response.data;
    } catch (error) {
      console.warn("‚ö†Ô∏è Endpoint de op√ß√µes n√£o dispon√≠vel, usando padr√µes");
      // Retorna dados padr√£o para n√£o quebrar o sistema
      return {
        roles: [
          { value: "1", label: "Super Admin" },
          { value: "2", label: "Admin" },
          { value: "3", label: "Operador" },
          { value: "4", label: "Motorista" },
        ],
        status: [
          { value: "1", label: "Ativo" },
          { value: "0", label: "Inativo" },
        ],
      };
    }
  }

  // ===== UTILIT√ÅRIOS =====

  // Testar conectividade
  async testConnection() {
    try {
      const response = await api.get("/health");
      return { connected: true, status: response.status };
    } catch (error) {
      // Fallback: tentar endpoint b√°sico
      try {
        const response = await fetch(api.defaults.baseURL.replace("/api", ""));
        return {
          connected: response.ok,
          status: response.status,
          fallback: true,
        };
      } catch (fallbackError) {
        return { connected: false, error: error.message };
      }
    }
  }

  // Verificar se o token ainda √© v√°lido
  async validateToken() {
    try {
      await this.getCurrentUser();
      return true;
    } catch (error) {
      console.warn("üîë Token inv√°lido ou expirado");
      return false;
    }
  }

  // Configurar URL da API dinamicamente
  setApiUrl(newUrl) {
    api.defaults.baseURL = newUrl;
    console.log(`üîß URL da API alterada para: ${newUrl}`);
  }
}

// Exportar inst√¢ncia √∫nica do servi√ßo
export default new ApiService();
